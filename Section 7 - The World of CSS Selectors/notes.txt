CSS Selectors

So far we have been applying styles to general html elements like a paragraph <p>. CSS selectors are a way to apply styles to specific elements rather than all paragraph elements we can apply it to a single target element.

Universal Selectors
Selects everything in the document to add style to it. Denoted by a '*'.

Element Selectors
Select all elements of a type

Selector List
Use a comma separated list to select multiple elements to apply the same style to

ID selectors
'#' for an id
Select a specific element based on its id attribute which you specify in the html.

Class Selector
'.' for a class
A class refers to a class of elements which can makeup any combination of html elements.
The class selector will apply a style to all elements of that class.

Descendant selector
Example:
Selects all anchor tags that are descendants of an li 
li a {
    color: teal;
}
Note the space between element types denotes a descendant selector
Use this if you want all anchor tags within a list to look the same but not necessarily all anchor tags on the page.

Adjacent Selector
Selects all elements b adjacent to element a
a + b {
    color: green;
}

Direct-Descendant Selector
Selects all elements b that are direct descendants and direct descendants only of element a
a > b {
    color: blue;
}

Attribute Selector
Select all elements a that contain the attribute of some value
input[type="text"] {
    width: 300px;
    color: yellow;
}

Pseudo-classes
A keyword added to a selector that lets you style a specific state of the selected element(s). For example, the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can be styled.
Denoted by a ':' colon
button:hover {
    background-color: blue;
}

Pseudo-elements
a keyword added to a selector that lets you style a specific part of the selected element(s)
Denoted by a '::' double colon
selector::pseudo-element {
    property: value;
}
p::first-line {
    color: blue;
    text-transform: uppercase;
}

The CSS Cascade
The order your styles are declared in and linked to matters!
h1 {
    color: red;
}
h1 {
    color: purple;
}
Purple wins!

Specificity
How the browser decides which rules to apply when multiple rules could apply to the same element.
It is a measure of how specific a given selector is. The more specific selector wins!

Inline Styles & Important
Inline Styles are when you insert the style attribute into an element directly. This is not recommended and you should always style your html through your linked css file.
Ex: <h1 style="color: blue">Hello World</h1>
Important - denoted as !Important
Overrides the specificity and cascade of a css stylesheet on an element. This is also not recommended but should be covered.
Ex: Let's say you have the following styles in your css.
h1 {
    color: magenta !important;
}
h1.main {
    color: magenta;
}
Even though h1.main is both more specific and at the bottom of the stylesheet, the color magenta will be applied because the !important keyword overrides this.

Inheritance
This sounds like what it is. If a style is applied to some parent element and no other style is applied to its children, they may inherit the style themselves. This is uncommon.
Ex: 
body {
    color: purple;
}
/* Nothing else in style sheet */
If the body contains more elements like a paragraph <p> or a section <section> they will inherit the color purple from the body style.